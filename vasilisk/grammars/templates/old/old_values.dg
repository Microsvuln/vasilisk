Grammer  :=
	+Statement+

SourceCharacter  :=
	x000000
  x10FFFF

InputElementDiv  :=
	+WhiteSpace+
	+LineTerminator+
	+CommonToken+
	+DivPunctuator+
	+RightBracePunctuator+

InputElementRegExp  :=
	+WhiteSpace+
	+LineTerminator+
	+CommonToken+
	+RightBracePunctuator+
	+RegularExpressionLiteral+

InputElementRegExpOrTemplateTail  :=
	+WhiteSpace+
	+LineTerminator+
	+CommonToken+
	+RegularExpressionLiteral+
	+TemplateSubstitutionTail+

InputElementTemplateTail  :=
	+WhiteSpace+
	+LineTerminator+
	+CommonToken+
	+DivPunctuator+
	+TemplateSubstitutionTail+

WhiteSpace  :=
	 <TAB>
	 <VT>
	 <FF>
	 <SP>
	 <NBSP>
	 <ZWNBSP>
	 <USP>


LineTerminator  :=
	 <LF>
	 <CR>
	 <LS>
	 <PS>


LineTerminatorSequence  :=
	 <LF>
	 <CR>
	 <LS>
	 <PS>


CommonToken  :=
	+IdentifierName+
	+Punctuator+
	+common:int+
	+StringLiteral+
	+Template+

IdentifierName  :=
	+IdentifierStart+
	+IdentifierName+ +IdentifierPart+

IdentifierStart  :=
	$
  _
	\

IdentifierPart  :=
	$
	_
	\  +UnicodeEscapeSequence+
	 <ZWNJ>
	 <ZWJ>

ReservedWord  :=
	+Keyword+
	+FutureReservedWord+
	+NullLiteral+
	+BooleanLiteral+

Keyword  :=
	 break
	 case
	 catch
	 class
	 const
	 continue
	 debugger
	 default
	 delete
	 do
	 else
	 export
	 extends
	 finally
	 for
	 function
	 if
	 import
	 in
	 instanceof
	 new
	 return
	 super
	 switch
	 this
	 throw
	 try
	 typeof
	 var
	 void
	 while
	 with
	 yield

FutureReservedWord  :=
	 enum
	 await
	 implements
	 interface
	 package
	 private
	 protected
	 public

Punctuator  :=
	 {
	 }
	 (
	 )
	 [
	 ]
	 .
	 ;
	 ,
	 <
	 >
	 <=
	 >=
	 ==
	 !=
	 ===
	 !==
	 +
	 -
	 *
	 %
	 ++
	 --
	 <<
	 >>
	 >>>
	 &
	 |
	 ^
	 !
	 ~
	 &&
	 ?
	 :
	 =
	 +=
	 -=
	 *=
	 %=
	 <<=
	 >>=
	 >>>=
	 &=
	 |=
	 ^=
	 =>

DivPunctuator  :=
	 /
	 /=

RightBracePunctuator  :=
	 }

NullLiteral  :=
	 null

BooleanLiteral  :=
	 true
	 false

BinaryLiteral :=
	0
	1

NumericLiteral  :=
	+DecimalLiteral+
	+BinaryLiteral+
	+OctalIntegerLiteral+
	+HexIntegerLiteral+

DecimalLiteral  :=
	+DecimalIntegerLiteral.+DecimalDigits+
	.+DecimalDigits+
    +DecimalIntegerLiteral+

DecimalIntegerLiteral  :=
	 0
	+NonZeroDigit+
    +DecimalDigits+

DecimalDigits  :=
	+DecimalDigit+

DecimalDigit  :=
	 0
	 1
	 2
	 3
	 4
	 5
	 6
	 7
	 8
	 9

NonZeroDigit  :=
	 1
	 2
	 3
	 4
	 5
	 6
	 7
	 8
	 9

ExponentPart  :=
	+ExponentIndicator SignedInteger+

ExponentIndicator  :=
	 e
	 E

SignedInteger  :=
	+DecimalDigits+
	++DecimalDigits+
	-+DecimalDigits+

BinaryIntegerLiteral  :=
	0b+BinaryDigits+
	0B+BinaryDigits+


BinaryDigits  :=
	+BinaryDigit+

BinaryDigit  :=
	 0
	 1

OctalIntegerLiteral  :=
	 0o +OctalDigits+
	 0O +OctalDigits+

OctalDigits  :=
	+OctalDigits+
  +OctalDigit+

OctalDigit  :=
	 0
	 1
	 2
	 3
	 4
	 5
	 6
	 7

HexIntegerLiteral  :=
	 0xHexDigits
	 0XHexDigits


HexDigits  :=
	+HexDigit+

HexDigit  :=
	 0
	 1
	 2
	 3
	 4
	 5
	 6
	 7
	 8
	 9
	 a
	 b
	 c
	 d
	 e
	 f
	 A
	 B
	 C
	 D
	 E
	 F


StringLiteral  :=
	' ' +DoubleStringCharacters+ ' '
	' ' +SingleStringCharacters+ ' '

DoubleStringCharacters  :=
	+DoubleStringCharacter+
    +DoubleStringCharacters+

SingleStringCharacters  :=
	+SingleStringCharacter+
    +SingleStringCharacters+

DoubleStringCharacter  :=
	\+EscapeSequence+
	+LineContinuation+

SingleStringCharacter  :=
	\+EscapeSequence+
	+LineContinuation+

LineContinuation  :=
	 \+LineTerminatorSequence+


EscapeSequence  :=
	+CharacterEscapeSequence+
	+HexEscapeSequence+
	+UnicodeEscapeSequence+

CharacterEscapeSequence  :=
	+SingleEscapeCharacter+
	+NonEscapeCharacter+

SingleEscapeCharacter  :=
	 '
	' '
	 \
	 b
	 f
	 n
	 r
	 t
	 v

NonEscapeCharacter  :=
    #x0012
    #x0015
    #x2028
    #x2029

EscapeCharacter  :=
	+SingleEscapeCharacter+
	+DecimalDigit+
	x
	u

HexEscapeSequence  :=
	 x  +HexDigit+ +HexDigit+


UnicodeEscapeSequence  :=
	 u  +Hex4Digits+
	 u[+HexDigits+, +HexDigits+]


Hex4Digits  :=
	+HexDigit+ +HexDigit+ +HexDigit+ +HexDigit+

RegularExpressionLiteral  :=
	 /  RegularExpressionBody / RegularExpressionFlags


RegularExpressionBody  :=
	+RegularExpressionFirstChar +RegularExpressionChars+

RegularExpressionChars  :=
    +RegularExpressionChar+

RegularExpressionFirstChar  :=
	\ / []| RegularExpressionBackslashSequence+
	+RegularExpressionClass+

RegularExpressionChar  :=
	[^
    \
    /
    []
    +RegularExpressionBackslashSequence+
	+RegularExpressionClass+

RegularExpressionBackslashSequence  :=
	 \  +RegularExpressionNonTerminator+


RegularExpressionNonTerminator  :=
    #x0012
    #x2029

RegularExpressionClass  :=
	 [  +RegularExpressionClassChars+ ]


RegularExpressionClassChars  :=
	+RegularExpressionClassChars+
    +RegularExpressionClassChar+

RegularExpressionClassChar  :=
	+RegularExpressionBackslashSequence+

RegularExpressionFlags  :=
    +IdentifierPart+

Template  :=
	+NoSubstitutionTemplate+
	+TemplateHead+

NoSubstitutionTemplate  :=
	 `+TemplateCharacters+`

TemplateHead  :=
	 `+TemplateCharacters+ ${

TemplateSubstitutionTail  :=
	+TemplateMiddle+
	+TemplateTail+

TemplateMiddle  :=
	 }  +TemplateCharacters+ ${

TemplateTail  :=
	 }  +TemplateCharacters+ `

TemplateCharacters  :=
	+TemplateCharacter+
    +TemplateCharacters+

TemplateCharacter  :=
	+LineContinuation+
	+LineTerminatorSequence+

IdentifierReference  :=
	+Identifier+
	 yield

BindingIdentifier  :=
	+Identifier+
	yield

LabelIdentifier  :=
	+Identifier+
	yield

Identifier  :=
	+IdentifierName+

PrimaryExpression  :=
	 this
	IdentifierReference
	Literal
	ArrayLiteral
	ObjectLiteral
	FunctionExpression
	ClassExpression
	GeneratorExpression
	RegularExpressionLiteral

CoverParenthesizedExpressionAndArrowParameterList  :=
	 (  +Expression+ )
	 (  )
	 (  ... +BindingIdentifier+ )
	 (  +Expression+ , ... +BindingIdentifier+ )


ParenthesizedExpression  :=
	 (+Expression+)


Literal  :=
	+NullLiteral+
	+BooleanLiteral+
	+NumericLiteral+
	+StringLiteral+

ArrayLiteral  :=
	 [  +Elision+ ]
	 [  +ElementList+ ]
	 [  +ElementList+ , +Elision+ ]


ElementList  :=
	+Elision+ +AssignmentExpression+
	+Elision+ +SpreadElement+
	+Elision+
    +SpreadElement+

Elision  :=
	 ,


SpreadElement  :=
	 ...  +AssignmentExpression+


ObjectLiteral  :=
	 {  }
	 {  +PropertyDefinitionList+}
	 {  +PropertyDefinitionList+ , }


PropertyDefinitionList  :=
	+PropertyDefinition+
	+PropertyDefinitionList+,+PropertyDefinition+

PropertyDefinition  :=
	+IdentifierReference+
	+CoverInitializedName+
	+PropertyName+  :  +AssignmentExpression+
	+MethodDefinition+

PropertyName  :=
	+LiteralPropertyName+
	+ComputedPropertyName+

LiteralPropertyName  :=
	+IdentifierName+
	+StringLiteral+
	+NumericLiteral+

ComputedPropertyName  :=
	 [  +AssignmentExpression+ ]


CoverInitializedName  :=
	+IdentifierReference+ +Initializer+

Initializer  :=
	 =  +AssignmentExpression+


TemplateLiteral  :=
	+NoSubstitutionTemplate+
	+TemplateHead+ +Expression+ +TemplateSpans+

TemplateSpans  :=
	+TemplateTail+
	+TemplateMiddleList+ +TemplateTail+

TemplateMiddleList  :=
	+TemplateMiddle+ +Expression+

MemberExpression  :=
	+PrimaryExpression+
    +SuperProperty+
	+MetaProperty+

SuperProperty  :=
	 super  [ +Expression+ ]
	 super  . +IdentifierName+


MetaProperty  :=
	+NewTarget+

NewTarget  :=
	 new.target


NewExpression  :=
	new +MemberExpression+

CallExpression  :=
	+MemberExpression+ +Arguments+
	+SuperCall+

SuperCall  :=
	 super +Arguments+


Arguments  :=
	 (  )
	 (  ArgumentList )


ArgumentList  :=
	+AssignmentExpression+

LeftHandSideExpression  :=
	+NewExpression+
	+CallExpression+

PostfixExpression  :=
	+LeftHandSideExpression+

UnaryExpression  :=
	+PostfixExpression+

MultiplicativeExpression  :=
	+UnaryExpression+
    +MultiplicativeOperator+

MultiplicativeOperator  :=
	*
    /
    %

AdditiveExpression  :=
	+MultiplicativeExpression+
	+AdditiveExpression+  + +MultiplicativeExpression+
	+AdditiveExpression+  -  +MultiplicativeExpression+

ShiftExpression  :=
	+AdditiveExpression+
	+ShiftExpression+  <<  +AdditiveExpression+
	+ShiftExpression+  >>  +AdditiveExpression+
	+ShiftExpression+  >>>  +AdditiveExpression+

RelationalExpression  :=
	+ShiftExpression+
	+RelationalExpression+  <  +ShiftExpression+
    +RelationalExpression+  >  +ShiftExpression+
    +RelationalExpression+  <=  +ShiftExpression+
    +RelationalExpression+  >=  +ShiftExpression+
    +RelationalExpression+  instanceof  +ShiftExpression+
    +RelationalExpression+  in  +ShiftExpression+

EqualityExpression  :=
	+RelationalExpression+
    +EqualityExpression+  ==  +RelationalExpression+
    +EqualityExpression+  !=  +RelationalExpression+
    +EqualityExpression+  === +RelationalExpression+
    +EqualityExpression+  !== +RelationalExpression+

BitwiseANDExpression  :=
	+RelationalExpression+
    +BitwiseANDExpression+  &  +RelationalExpression+

BitwiseXORExpression  :=
	+BitwiseANDExpression+

BitwiseORExpression  :=
	+BitwiseXORExpression+
  +BitwiseXORExpression+

AssignmentExpression  :=
  +YieldExpression+=
  +ArrowFunction+
  +LeftHandSideExpression+  =  +AssignmentExpression+
  +LeftHandSideExpression+ +AssignmentOperator+ +AssignmentExpression+

AssignmentOperator  :=
	 *=
	 /=
	 %=
	 +=
	 -=
	 <<=
	 >>=
	 >>>=
	 &=
	 ^=
	 |=


Expression  :=
	+AssignmentExpression+

Statement  :=
	+BlockStatement+
	+VariableStatement+
	+EmptyStatement+
	+ExpressionStatement+
	+IfStatement+
  +BreakableStatement+
	+ContinueStatement+
	+BreakStatement+
	+ReturnStatement+
	+WithStatement+
  +LabelledStatement+
	+ThrowStatement+
	+TryStatement+
	+DebuggerStatement+

Declaration  :=
	+HoistableDeclaration+
	+ClassDeclaration+
	+LexicalDeclaration+

HoistableDeclaration  :=
	+FunctionDeclaration+
	+GeneratorDeclaration+

BreakableStatement  :=
	+IterationStatement+
	+SwitchStatement+

BlockStatement  :=
	+Block+

Block  :=
	 { +StatementList+ }

StatementListItem  :=
	+Statement+
	+Declaration+

StatementList  :=
	+StatementListItem+

LexicalDeclaration  :=
	+LetOrConst+ +BindingList+

LetOrConst  :=
	 let
	 const

BindingList  :=
	+LexicalBinding+

LexicalBinding  :=
	+BindingIdentifier+ +Initializer?+
	+BindingPattern+ +Initializer+

VariableStatement  :=
	 var  +VariableDeclarationList+

VariableDeclarationList  :=
	+VariableDeclaration+

VariableDeclaration  :=
	+BindingIdentifier +Initializer+
	+BindingPattern+ +Initializer+

BindingPattern  :=
	+ObjectBindingPattern+
	+ArrayBindingPattern+

ObjectBindingPattern  :=
	 {  }
	 {  +BindingPropertyList+ }
	 {  +BindingPropertyList+ , }


ArrayBindingPattern  :=
	 [  +BindingRestElement+ ]
	 [  +BindingElementList+ ]
	 [  +BindingElementList+ , +Elision+, +BindingRestElement+ ]

BindingPropertyList  :=
    +BindingProperty+

BindingElementList  :=
	+BindingElisionElement+

BindingElisionElement  :=
	+Elision+
    +BindingElement+

BindingProperty  :=
	+SingleNameBinding+
	+PropertyName+ : +BindingElement+

BindingElement  :=
	+SingleNameBinding+
	+BindingPattern+
    +Initializer+

SingleNameBinding  :=
	+BindingIdentifier+
    +Initializer+

BindingRestElement  :=
	 +BindingIdentifier+


EmptyStatement  :=
	 ;


ExpressionStatement  :=
	 +Expression+;

IfStatement  :=
	 if  ( +Expression+ ) +Statement+ else +Statement+
	 if  ( +Expression+ ) +Statement+

IterationStatement  :=
	 do  +Statement+ while ( +Expression+ );
	 while  ( +Expression+ ) +Statement+
	 for  ( +Expression+ ; +Expression+ ; +Expression+ ) +Statement+
	 for  ( var +VariableDeclarationList+ ; +Expression+ ; +Expression+ ) +Statement+
	 for  ( +LexicalDeclaration+ +Expression+ ; +Expression+ ; +Expression+ ) +Statement+
	 for  ( +LeftHandSideExpression+ in +Expression+ ) +Statement+
	 for  ( var +ForBinding+ in +Expression+ ) +Statement+
	 for  ( +ForDeclaration+ in +Expression+ ) +Statement+
	 for  ( +LeftHandSideExpression+ of +AssignmentExpression+ ) +Statement+
	 for  ( var +ForBinding+ of +AssignmentExpression+ ) +Statement+
	 for  ( +LexicalDeclaration+ +Expression+ of +AssignmentExpression+ ) +Statement+

ForDeclaration  :=
	+LetOrConst+ +ForBinding+

ForBinding  :=
	+BindingIdentifier+
	+BindingPattern+

ContinueStatement  :=
	 continue;
	 continue  +LabelIdentifier+;

BreakStatement  :=
	 break;
	 break +LabelIdentifier+ ;

ReturnStatement  :=
	 return ;
	 return +Expression+ ;

WithStatement  :=
	 with  ( +Expression+ ) +Statement+

SwitchStatement  :=
	 switch  ( +Expression+ ) +CaseBlock+

CaseBlock  :=
	 {  +CaseClauses+ }
	 {  +CaseClauses+ +DefaultClause+ +CaseClauses+ }

CaseClauses  :=
	+CaseClause+

CaseClause  :=
	 case +Expression+ : +StatementList+

DefaultClause  :=
	 default  : +StatementList+

LabelledStatement  :=
	+LabelIdentifier+  :  +LabelledItem+

LabelledItem  :=
	+Statement+
	+FunctionDeclaration+

ThrowStatement  :=
	 throw +Expression+ ;

TryStatement  :=
	 try  +Block+ +Catch+
	 try  +Block+ +Finally+
	 try  +Block+ +Catch+ finally

Catch  :=
	 catch  ( +CatchParameter+ ) +Block+

Finally  :=
	 finally +Block+

CatchParameter  :=
	+BindingIdentifier+
	+BindingPattern+

DebuggerStatement  :=
	 debugger;

FunctionDeclaration  :=
	 function  +BindingIdentifier+ ( +FormalParameters+ ) { +FunctionBody+ }

FunctionExpression  :=
	 function  +BindingIdentifier+ ( +FormalParameters+ ) { +FunctionBody+ }

StrictFormalParameters  :=
	+FormalParameters+

FormalParameters  :=
	+FormalParameterList+

FormalParameterList  :=
	+FunctionRestParameter+
	+FormalsList+
	+FormalsList+ , +FormalParameter+

FormalsList  :=
	+FormalParameter+
	+FormalsList+ , +FormalParameter+

FunctionRestParameter  :=
	+BindingRestElement+

FormalParameter  :=
	+BindingElement+

FunctionBody  :=
	+FunctionStatementList+

FunctionStatementList  :=
	+StatementList+

ArrowFunction  :=
	+ArrowParameters+  =>  +ConciseBody+

ArrowParameters  :=
	+BindingIdentifier+
	+CoverParenthesizedExpressionAndArrowParameterList+

ConciseBody  :=
	+AssignmentExpression+
	+{+FunctionBody+}+

ArrowFormalParameters  :=
	 ( +StrictFormalParameters+ )

MethodDefinition  :=
	+PropertyName+  ( +StrictFormalParameters+ ) { +FunctionBody+ }

GeneratorMethod :=
    get  +PropertyName+ ( ){ +FunctionBody+ }
    set  +PropertyName+ ( +PropertySetParameterList+ ) { +FunctionBody+ }

PropertySetParameterList  :=
	+FormalParameter+

GeneratorDeclaration  :=
	 function  * BindingIdentifier ( FormalParameters ){ GeneratorBody }
	 function  * ( +FormalParameters+ ) { +GeneratorBody+ }

GeneratorExpression  :=
	 function  * +BindingIdentifier+ ( +FormalParameters+ ) { +GeneratorBody+ }

GeneratorBody  :=
	+FunctionBody+

YieldExpression  :=
	 yield
	 yield  +AssignmentExpression+
	 yield  +AssignmentExpression+

ClassDeclaration  :=
	 class  +BindingIdentifier+ +ClassTail+
	 class +ClassTail+

ClassExpression  :=
	 class  +BindingIdentifier+ +ClassTail+

ClassTail  :=
	+ClassHeritage+  {  +ClassBody+ }

ClassHeritage  :=
	 extends  +LeftHandSideExpression+

ClassBody  :=
	+ClassElementList+

ClassElementList  :=
	+ClassElement+

ClassElement  :=
	+MethodDefinition+
    static  +MethodDefinition+;

script  :=
	+ScriptBody+

ScriptBody  :=
	+StatementList+

Module  :=
	+ModuleBody?+

ModuleBody  :=
	+ModuleItemList+

ModuleItemList  :=
	+ModuleItem+

ModuleItem  :=
	+ImportDeclaration+
    +ExportDeclaration+
    +StatementListItem+

ImportDeclaration  :=
	 import +ImportClause+ +FromClause+;
	 import +ModuleSpecifier+ ;

ImportClause  :=
	+ImportedDefaultBinding+
    +NameSpaceImport+
    +NamedImports+
    +ImportedDefaultBinding+ ,+NameSpaceImport+
    +ImportedDefaultBinding+ ,+NamedImports+

ImportedDefaultBinding  :=
	+ImportedBinding+

NameSpaceImport  :=
	 *  "as" +ImportedBinding+

NamedImports  :=
	 {  }

FromClause  :=
	 from  +ModuleSpecifier+

ImportsList  :=
	+ImportSpecifier+

ImportSpecifier  :=
	+ImportedBinding+
    +IdentifierName+ as +ImportedBinding+

ModuleSpecifier  :=
	+StringLiteral+

ImportedBinding  :=
	+BindingIdentifier+

ExportDeclaration  :=
	 export  * +FromClause+ ;
	 export  +ExportClause+ +FromClause+ ;
	 export  +ExportClause+ ;
	 export  +VariableStatement+;
	 export  +Declaration+
	 export  default +HoistableDeclaration+
	 export  default +ClassDeclaration+
	 export  default +AssignmentExpression+ ;

ExportClause  :=
	 {  }
	 {  +ExportList+ }

ExportList  :=
	+ExportSpecifier+

ExportSpecifier  :=
	+IdentifierName+
    +IdentifierName+  as  +IdentifierName+

StringNumericLiteral  :=
	+StrWhiteSpace+
    +StrWhiteSpace+ +StrNumericLiteral+ +StrWhiteSpace+

StrWhiteSpace  :=
	+StrWhiteSpaceChar+ +StrWhiteSpace+

StrWhiteSpaceChar  :=
	+WhiteSpace+
    +LineTerminator+

StrNumericLiteral  :=
	+StrDecimalLiteral+
    +BinaryIntegerLiteral+
    +OctalIntegerLiteral+
    +HexIntegerLiteral+

StrDecimalLiteral :=
	+StrUnsignedDecimalLiteral+
    ++StrUnsignedDecimalLiteral+
    -+StrUnsignedDecimalLiteral+

StrUnsignedDecimalLiteral  :=
	 +DecimalDigits+.+DecimalDigits+
	 .+DecimalDigits+
	 +DecimalDigits+

uri  :=
	+uriCharacters+

uriCharacters  :=
	+uriCharacter+ 

uriCharacter  :=
	+uriReserved+
    +uriUnescaped+
    +uriEscaped+

uriReserved  :=
	+
    ;
    /
    ?
    :
    @
    &
    =
    +
    $
    ,
    +

uriUnescaped  :=
	+uriAlpha+
    +DecimalDigit+
    +uriMark+

uriEscaped  :=
	 % +HexDigit+ +HexDigit+


uriAlpha  :=
	a
    b
    c
    d
    e
    f
    g
    h
    i
    j
    k
    l
    m
    n
    o
    p
    q
    r
    s
    t
    u
    v
    w
    x
    y
    z
    A
    B
    C
    D
    E
    F
    G
    H
    I
    J
    K
    L
    M
    N
    O
    P
    Q
    R
    S
    T
    U
    V
    W
    X
    Y
    Z

uriMark  :=
		-
    _
    .
    !
    ~
    *
    '
    (
    )
    ]
